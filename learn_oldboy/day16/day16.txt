


Django

   1 流程：
       (1) 设计url： url(r'^timer/', timer), # timer(request)
	   (2) 构建视图函数：
	       在views.py:
		    def timer(request):
				import time
				ctime=time.time()
				return render(request,"timer.html",{"ctime":ctime})
				
	    (3) templates:timer.html
		        <p>当前时间：{{ ctime }}</p>
				
				
	

    2 URL控制器（路由层）：
	    
		简单配置
		分组
		有名分组
		分发
		反向解析
		
	
	3 MTV--View(视图层)：
	   
	   请求对象
	        request：
			   request.GET
			   request.POST
			   request.method
			   request.path
	   
	  
	   响应对象：
	        Httpresponse()
			render()
			redirect()
	
	
	4 MTV--Template(模板层)
	
		  渲染变量 {{ }}
			   深度查询句点符
			   过滤器{{ var|filter:参数}}
			   add
			   date
			   safe
			   filesizeformat	   
			   
		  渲染标签 {% %}
			   for
			   if
			   url 反向解析
			   csrftoken
		  自定义过滤器和标签

    4 MTV--Model(模型层)
	
	    ORM---对象关系映射
		
		    class Book(model.Model):
			    title=models.CharFiled(max_length=32)

				
		    create table book (
			     title varchar(32)			
			)
			
			
			类名        ------表名
			类属性      ------表字段
			类实例对象  ------表记录
			
		
	        
	
	    单表记录操作：
		    Book
			    id    title
		        1     python
				2     java
		    添加记录：
			   # 方式1：
			   # obj新添加记录对象
			   obj=Book.objects.create(title="python")
	           # 方式2：
			   obj=Book(title="java")
	           obj.save()

            查询记录API（QuerySet）：
			
			    <1> all():                 查询所有结果
 
				<2> filter(**kwargs):      它包含了与所给筛选条件相匹配的对象
				 
				<3> get(**kwargs):         返回与所给筛选条件相匹配的对象，返回结果有且只有一个，
										   如果符合筛选条件的对象超过一个或者没有都会抛出错误。	 
				<5> exclude(**kwargs):     它包含了与所给筛选条件不匹配的对象
				 
				<4> values(*field):        返回一个ValueQuerySet——一个特殊的QuerySet，运行后得到的并不是一系列
										   model的实例化对象，而是一个可迭代的字典序列
				 
				<9> values_list(*field):      它与values()非常相似，它返回的是一个元组序列，values返回的是一个字典序列
				 
				<6> order_by(*field):      对查询结果排序
				 
				<7> reverse():             对查询结果反向排序
				 
				<8> distinct():            从返回结果中剔除重复纪录
				 
				<10> count():              返回数据库中匹配查询(QuerySet)的对象数量。
				 
				<11> first():              返回第一条记录
				 
				<12> last():               返回最后一条记录
				 
				<13> exists():            如果QuerySet包含数据，就返回True，否则返回False
                
				
				模糊查询: __
				
				
				
            删除记录
			    Book.objects.filter(price=123,title="python").delete()

            更新记录：
			    Book.objects.filter(price=123,title="python").update(title="python123") 
	
	mysql表关系
	
	一对多关系：关联字段
	多对多关系：创建关系表
	
	Book
	   title=...
	   publish=Foreignkey(to="Publish",to_field="")
	   authors=
	Publish
	   name=....
	   
	Author
	   name=....
	
	Book2Author
	
	
	
	
	
	
	
	
	